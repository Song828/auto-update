name: Update SmartDNS Rules（GFW+AD）

on:
  schedule:
    - cron: "0 */1 * * *"   # 每小时运行一次（UTC时间）
  workflow_dispatch:       # 允许手动触发

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y wget

      - name: Build gfw.conf
        run: bash build-gfw.sh

      - name: Check for all file changes
        id: git-check
        run: |
          # 定义文件名
          GFW_FILE="gfw.conf"
          AD_BLACKLIST="anti-ad-for-smartdns.conf"
          AD_WHITELIST="anti-ad-white-for-smartdns.conf"
          
          # 定义远程URL
          AD_BLACKLIST_URL="https://anti-ad.net/anti-ad-for-smartdns.conf"
          AD_WHITELIST_URL="https://raw.githubusercontent.com/privacy-protection-tools/dead-horse/master/anti-ad-white-for-smartdns.txt"

          # 初始化变更标记
          HAS_CHANGES=false
          
          # ===================== 核心优化点 V2 =====================
          # 1. 检查 GFW 规则 (忽略时间戳和排序)
          # 通过对规则内容进行排序后，再计算 SHA256 哈希值，确保比较逻辑与域名顺序无关。
          NEW_GFW_HASH=$(tail -n +2 "$GFW_FILE" | sort | sha256sum | awk '{print $1}')
          OLD_GFW_HASH=$(git show HEAD:"$GFW_FILE" 2>/dev/null | tail -n +2 | sort | sha256sum | awk '{print $1}')

          if [ "$NEW_GFW_HASH" != "$OLD_GFW_HASH" ]; then
            echo "::notice::GFW 规则核心内容有更新."
            HAS_CHANGES=true
          fi
          
          # 2. 检查广告黑名单 (同样采用排序后哈希，确保顺序无关)
          wget -q -O "$AD_BLACKLIST" "$AD_BLACKLIST_URL"
          NEW_AD_BLACK_HASH=$(sort "$AD_BLACKLIST" | sha256sum | awk '{print $1}')
          OLD_AD_BLACK_HASH=$(git show HEAD:"$AD_BLACKLIST" 2>/dev/null | sort | sha256sum | awk '{print $1}')

          if [ "$NEW_AD_BLACK_HASH" != "$OLD_AD_BLACK_HASH" ]; then
            echo "::notice::广告黑名单有更新."
            HAS_CHANGES=true
          fi

          # 3. 检查广告白名单 (同样采用排序后哈希)
          wget -q -O "$AD_WHITELIST" "$AD_WHITELIST_URL"
          NEW_AD_WHITE_HASH=$(sort "$AD_WHITELIST" | sha256sum | awk '{print $1}')
          OLD_AD_WHITE_HASH=$(git show HEAD:"$AD_WHITELIST" 2>/dev/null | sort | sha256sum | awk '{print $1}')
          
          if [ "$NEW_AD_WHITE_HASH" != "$OLD_AD_WHITE_HASH" ]; then
            echo "::notice::广告白名单有更新."
            HAS_CHANGES=true
          fi
          # =========================================================

          # 根据最终标记设置输出
          if [ "$HAS_CHANGES" == "true" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::所有规则均无更新，跳过提交。"
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push if changed
        id: push_step
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add "$GFW_FILE" "$AD_BLACKLIST" "$AD_WHITELIST"
          git commit -m "Auto update SmartDNS rules at $(date '+%F %T')"
          git push

      - name: Notify clients to update
        if: steps.push_step.outcome == 'success'
        run: |
          # 通知逻辑 (保持不变)
          notify_client() {
            local client_name=$1
            local webhook_url=$2
            local webhook_secret=$3
            local max_attempts=3
            local attempt=1
            local status_code

            echo "Notifying ${client_name}..."
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts for ${client_name}..."
              status_code=$(curl --write-out "%{http_code}" --silent --output /dev/null \
                --connect-timeout 5 \
                --max-time 10 \
                --retry 2 \
                --retry-delay 2 \
                --retry-max-time 30 \
                -X POST \
                -H "X-Hook-Secret: ${webhook_secret}" \
                -H "Content-Length: 0" \
                "${webhook_url}")

              if [ "$status_code" -eq 200 ]; then
                echo "::notice::Successfully notified ${client_name} (Status: $status_code)"
                return 0
              else
                echo "::warning::Failed to notify ${client_name} (Status: $status_code) on attempt $attempt"
                sleep 2
              fi
              ((attempt++))
            done

            echo "::error::Failed to notify ${client_name} after $max_attempts attempts (Final Status: $status_code)"
            return 1
          }
          notify_client "OpenWrt" "${{ secrets.OPENWRT_WEBHOOK_URL }}" "${{ secrets.OPENWRT_WEBHOOK_SECRET }}" &
          notify_client "Ubuntu" "${{ secrets.UBUNTU_WEBHOOK_URL }}" "${{ secrets.UBUNTU_WEBHOOK_SECRET }}" &
          wait

      - name: Job Summary
        if: always()
        run: |
          if [[ steps.git-check.outputs.changes == 'true' ]]; then
            echo "✅ 本次运行完成：检测到规则更新，并已成功推送到仓库和客户端。" >> $GITHUB_STEP_SUMMARY
          else
            echo "☑️ 本次运行完成：规则列表无变化，未执行任何推送操作。" >> $GITHUB_STEP_SUMMARY
          fi
